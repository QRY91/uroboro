name: Branch Synchronization

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch to sync (fat-snake, experimental, or all)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - fat-snake
          - experimental

jobs:
  sync-branches:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        branch: [fat-snake, experimental]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --global user.name "uroboro-bot"
        git config --global user.email "bot@uroboro.dev"

    - name: Skip if workflow_dispatch and not target branch
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.target_branch != 'all' && github.event.inputs.target_branch != matrix.branch
      run: |
        echo "Skipping ${{ matrix.branch }} as it's not the target"
        exit 0

    - name: Sync ${{ matrix.branch }} with main
      run: |
        echo "Syncing ${{ matrix.branch }} with main..."
        
        # Checkout target branch
        git checkout ${{ matrix.branch }}
        
        # Get the commit range to sync
        LAST_SYNC=$(git merge-base main ${{ matrix.branch }})
        NEW_COMMITS=$(git log --oneline $LAST_SYNC..main --reverse | cut -d' ' -f1)
        
        echo "Commits to sync: $NEW_COMMITS"
        
        # Cherry-pick each commit with conflict resolution
        for commit in $NEW_COMMITS; do
          echo "Processing commit: $commit"
          COMMIT_MSG=$(git log --format=%s -n 1 $commit)
          
          # Skip commits that are already in this branch or conflicts with branch purpose
          if [[ "$COMMIT_MSG" == *"PRESERVE THE BLOAT"* ]] && [[ "${{ matrix.branch }}" == "fat-snake" ]]; then
            echo "Skipping commit that conflicts with fat-snake purpose"
            continue
          fi
          
          # Try cherry-pick
          if git cherry-pick $commit; then
            echo "✅ Successfully cherry-picked $commit"
          else
            echo "⚠️ Conflict in $commit, attempting auto-resolution..."
            
            # Auto-resolve common conflicts
            if [[ "$COMMIT_MSG" == *"vocab"* ]] || [[ "$COMMIT_MSG" == *"language"* ]] || [[ "$COMMIT_MSG" == *"bloodbath"* ]]; then
              # For vocabulary/language fixes, prefer main's version for public docs
              git checkout --theirs README.md landing-page/index.html 2>/dev/null || true
              git add . && git cherry-pick --continue
              echo "✅ Auto-resolved vocabulary conflict"
            elif [[ "$COMMIT_MSG" == *"cleanup"* ]] && [[ "${{ matrix.branch }}" == "fat-snake" ]]; then
              # For cleanup commits on fat-snake, keep the bloat but apply doc changes
              git checkout --ours src/ 2>/dev/null || true
              git checkout --theirs README.md landing-page/index.html 2>/dev/null || true
              git add . && git cherry-pick --continue
              echo "✅ Auto-resolved cleanup conflict for fat-snake"
            else
              # For other conflicts, create a merge commit
              git add .
              git commit -m "Merge conflict resolution for: $COMMIT_MSG"
              echo "✅ Created merge commit for conflict resolution"
            fi
          fi
        done

    - name: Push changes
      run: |
        git push origin ${{ matrix.branch }}
        echo "✅ Successfully synced ${{ matrix.branch }}"

  conformity-check:
    runs-on: ubuntu-latest
    needs: sync-branches
    strategy:
      matrix:
        branch: [main, fat-snake, experimental]
        
    steps:
    - name: Checkout ${{ matrix.branch }}
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test basic functionality
      run: |
        # Test that core commands work
        uro --help
        uro capture --help
        uro publish --help
        uro status --help

    - name: Verify vocabulary consistency
      run: |
        # Check for aggressive language in public docs
        if grep -r "bloodbath\|murdered\|sacred" README.md landing-page/index.html 2>/dev/null; then
          echo "❌ Found aggressive vocabulary in public docs"
          exit 1
        else
          echo "✅ Vocabulary is clean"
        fi

    - name: Branch-specific conformity checks
      run: |
        if [[ "${{ matrix.branch }}" == "fat-snake" ]]; then
          echo "Checking fat-snake maintains bloat..."
          # Verify fat-snake has the full feature set
          test -f src/sensei.py || echo "⚠️ fat-snake missing sensei.py"
          test -f src/egg_system.py || echo "⚠️ fat-snake missing egg_system.py"
          echo "✅ fat-snake bloat check complete"
        elif [[ "${{ matrix.branch }}" == "main" ]]; then
          echo "Checking main is lean..."
          # Verify main doesn't have bloat
          test ! -f src/sensei.py || echo "⚠️ main has sensei.py bloat"
          test ! -f src/egg_system.py || echo "⚠️ main has egg_system.py bloat"
          echo "✅ main lean check complete"
        fi

  create-sync-report:
    runs-on: ubuntu-latest
    needs: [sync-branches, conformity-check]
    if: always()
    
    steps:
    - name: Create sync report
      run: |
        echo "## Branch Synchronization Report" > sync-report.md
        echo "" >> sync-report.md
        echo "**Date:** $(date)" >> sync-report.md
        echo "**Trigger:** ${{ github.event_name }}" >> sync-report.md
        echo "" >> sync-report.md
        echo "### Sync Status" >> sync-report.md
        echo "- fat-snake: ${{ needs.sync-branches.result }}" >> sync-report.md
        echo "- experimental: ${{ needs.sync-branches.result }}" >> sync-report.md
        echo "" >> sync-report.md
        echo "### Conformity Status" >> sync-report.md
        echo "- main: ${{ needs.conformity-check.result }}" >> sync-report.md
        echo "- fat-snake: ${{ needs.conformity-check.result }}" >> sync-report.md
        echo "- experimental: ${{ needs.conformity-check.result }}" >> sync-report.md

    - name: Upload sync report
      uses: actions/upload-artifact@v3
      with:
        name: sync-report
        path: sync-report.md 