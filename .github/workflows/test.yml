name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt || echo "No requirements.txt found"
        pip install -e .

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uroboro
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test CLI installation
      run: |
        uroboro --help
        uro --help

    - name: Test basic workflow
      run: |
        # Initialize git repo for testing
        git config --global user.email "test@example.com"
        git config --global user.name "Test User"
        git init
        
        # Test capture
        uro capture "Integration test capture from GitHub Actions"
        
        # Test status
        uro status
        
        # Test tracking (should be disabled by default)
        uro tracking

    - name: Test project templates
      run: |
        # Test creating a project from template
        mkdir -p /tmp/test-project
        cd /tmp/test-project
        python -c "from src.project_templates import ProjectTemplates; t = ProjectTemplates(); t.create_project('.', 'web', 'Test Project')"
        
        # Verify structure was created
        test -d .devlog
        test -f .devlog/README.md
        test -f .gitignore

  demo-generation:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install VHS
      run: |
        # Install VHS for demo generation
        wget https://github.com/charmbracelet/vhs/releases/latest/download/vhs_Linux_x86_64.tar.gz
        tar -xzf vhs_Linux_x86_64.tar.gz
        sudo mv vhs /usr/local/bin/
        vhs --version

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install uroboro
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Generate demo GIFs
      run: |
        # Create assets directory if it doesn't exist
        mkdir -p assets
        
        # Generate all demos (these will take a few minutes each)
        echo "Generating main demo..."
        vhs uroboro_demo.tape || echo "Main demo generation failed, continuing..."
        
        echo "Generating core workflow demo..."
        vhs uroboro_demo_core.tape || echo "Core demo generation failed, continuing..."
        
        echo "Generating git integration demo..."
        vhs uroboro_demo_git.tape || echo "Git demo generation failed, continuing..."
        
        echo "Generating project templates demo..."
        vhs uroboro_demo_templates.tape || echo "Templates demo generation failed, continuing..."

    - name: Upload demo artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: uroboro-demos
        path: assets/*.gif

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff src/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || echo "Type checking completed with warnings" 