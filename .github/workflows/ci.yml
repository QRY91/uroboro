name: Uroboro CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Run unit tests
      run: go test -v ./internal/...
      
    - name: Run tests with coverage
      run: go test -race -coverprofile=coverage.out -covermode=atomic ./internal/...

  build-and-test:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Build uroboro binary
      run: go build -o uroboro ./cmd/uroboro
      
    - name: Build uro binary (separate build)
      run: go build -o uro ./cmd/uroboro
      
    - name: Test local binaries
      run: |
        ./uroboro capture "CI test capture - ensuring binary works"
        ./uro -s
        ./uro -c "Short flag test from CI"
        
    - name: Test full workflow
      run: |
        # Test capture functionality
        ./uroboro capture "Integration test capture"
        ./uro -c "Short capture test"
        
        # Test status (should show our captures)
        ./uroboro status
        ./uro -s
        
        # Verify XDG compliance
        test -d ~/.local/share/uroboro/daily
        test -f ~/.local/share/uroboro/daily/$(date +%Y-%m-%d).md
        
        echo "âœ… All integration tests passed!"

    # System-wide installation regression test
    - name: Test system installation (regression test)
      run: |
        # Install to PATH
        mkdir -p ~/.local/bin
        cp ./uroboro ~/.local/bin/
        cp ./uro ~/.local/bin/
        export PATH="$HOME/.local/bin:$PATH"
        
        # Test system commands work (prevent Python regression)
        uroboro --help | grep -q "The Self-Documenting Content Pipeline"
        uro --help | grep -q "The Self-Documenting Content Pipeline"
        
        # Test core workflow doesn't crash
        uroboro capture "CI regression test - system installation works"
        uroboro status | grep -q "Recent activity"
        uro -c "CI regression test - short command works"
        uro -s | grep -q "Recent activity"

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Verify no amateur hour regressions
      run: |
        # Ensure all 3 commands still exist
        go build -o uroboro ./cmd/uroboro
        ./uroboro capture "Quality gate test" || exit 1
        ./uroboro status || exit 1
        ./uroboro publish --help || exit 1
        
        echo "âœ… Quality gate passed - no regressions detected!"
        
    - name: Notify success
      if: success()
      run: |
        echo "ðŸŽ‰ Uroboro CI pipeline completed successfully!"
        echo "ðŸ“Š Ready for doggowoof monitoring integration" 