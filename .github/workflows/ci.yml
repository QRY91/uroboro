name: Uroboro CI - Trinity Integration Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  # Step 1: Code Quality and Dependencies
  quality-check:
    name: Code Quality & Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Verify dependencies
      run: |
        echo "📦 Verifying dependencies..."
        go mod verify
        go mod tidy
        
        # Check for any changes after tidy
        if ! git diff --exit-code go.mod go.sum; then
          echo "❌ go.mod or go.sum needs to be tidied"
          exit 1
        fi
        
    - name: Code formatting check
      run: |
        echo "🎨 Checking code formatting..."
        if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code not formatted. Run: gofmt -w ."
          gofmt -l .
          exit 1
        fi
        
    - name: Go vet
      run: |
        echo "🔍 Running go vet..."
        go vet ./...
        
    - name: Install golangci-lint
      run: |
        echo "📥 Installing golangci-lint..."
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        
    - name: Run linter
      run: |
        echo "🔍 Running comprehensive linting..."
        $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  # Step 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run unit tests
      run: |
        echo "🧪 Running unit tests..."
        go test -v -race ./...
        
    - name: Run tests with coverage
      run: |
        echo "📊 Running coverage analysis..."
        go test -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out
        
    - name: Upload coverage to codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # Step 3: Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: unit-tests
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      run: |
        echo "🔨 Building uroboro binary for ${{ matrix.os }}..."
        go build -o uroboro ./cmd/uroboro
        
    - name: Basic functionality test
      run: |
        echo "🧪 Testing basic functionality..."
        ./uroboro capture "CI build verification test for ${{ matrix.os }}"
        ./uroboro status
        
    - name: Test configuration
      run: |
        echo "⚙️ Testing configuration..."
        ./uroboro config

  # Step 4: Integration Tests (Linux only - requires full environment)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-verification
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install ollama (for AI testing)
      run: |
        echo "🤖 Installing ollama for AI integration tests..."
        curl -fsSL https://ollama.ai/install.sh | sh
        
        # Start ollama in background
        ollama serve &
        sleep 5
        
        # Pull a small model for testing
        ollama pull tinyllama:1.1b || echo "⚠️ Failed to pull model - AI tests will be skipped"
        
    - name: Build binary
      run: |
        echo "🔨 Building binary for integration tests..."
        go build -o uroboro ./cmd/uroboro
        
    - name: Run comprehensive integration tests
      run: |
        echo "🧪 Running comprehensive integration test suite..."
        chmod +x scripts/test-integration.sh
        ./scripts/test-integration.sh
        
    - name: Test Trinity Intelligence features
      run: |
        echo "🧠 Testing Trinity Intelligence..."
        
        # Test smart project detection
        mkdir -p /tmp/test-trinity-project
        cd /tmp/test-trinity-project
        git init
        echo "test" > README.md
        
        # Should auto-detect project name
        OUTPUT=$(../uroboro capture "Trinity intelligence test" 2>&1)
        if echo "$OUTPUT" | grep -q "Auto-detected project: test-trinity-project"; then
          echo "✅ Smart project detection working"
        else
          echo "❌ Smart project detection failed"
          exit 1
        fi
        
        cd -
        
    - name: Test database integration
      run: |
        echo "🗄️ Testing database integration..."
        
        TEST_DB="/tmp/ci_test.sqlite"
        
        # Test database operations
        ./uroboro capture "Database integration test" --db "$TEST_DB"
        ./uroboro status --db "$TEST_DB"
        
        # Verify database was created and has content
        if [ ! -f "$TEST_DB" ]; then
          echo "❌ Database not created"
          exit 1
        fi
        
        COUNT=$(sqlite3 "$TEST_DB" "SELECT COUNT(*) FROM captures;" 2>/dev/null || echo "0")
        if [ "$COUNT" -gt 0 ]; then
          echo "✅ Database integration working ($COUNT captures)"
        else
          echo "❌ Database integration failed"
          exit 1
        fi
        
    - name: Test project filtering
      run: |
        echo "🎯 Testing project filtering..."
        
        TEST_DB="/tmp/filter_test.sqlite"
        
        # Add content for different projects
        ./uroboro capture "Project A content" --db "$TEST_DB"
        ./uroboro capture "Project B content" --db "$TEST_DB"
        
        # Test filtering
        OUTPUT=$(./uroboro status --project "integration-tests" --db "$TEST_DB" 2>/dev/null)
        
        # Should show filtered results
        echo "✅ Project filtering test completed"

  # Step 5: Performance and Stress Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run benchmarks
      run: |
        echo "⚡ Running performance benchmarks..."
        go test -bench=. -benchmem ./...
        
    - name: Build optimized binary
      run: |
        echo "🚀 Building optimized release binary..."
        CGO_ENABLED=0 go build -ldflags="-w -s" -o uroboro-optimized ./cmd/uroboro
        
    - name: Stress test with large dataset
      run: |
        echo "💪 Running stress tests..."
        
        # Create large dataset
        for i in {1..100}; do
          ./uroboro-optimized capture "Stress test capture $i - testing performance with large dataset"
        done
        
        # Test performance with large dataset
        time ./uroboro-optimized status --days 30
        
        echo "✅ Stress tests completed"

  # Step 6: Documentation and Examples
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README examples
      run: |
        echo "📚 Verifying README examples..."
        
        # Check that help output matches documentation
        go build -o uroboro ./cmd/uroboro
        
        # Verify help text is present
        if ! ./uroboro --help 2>&1 | grep -q "uroboro"; then
          echo "❌ Help text missing or incorrect"
          exit 1
        fi
        
        echo "✅ Documentation check passed"

  # Step 7: Security and Dependencies Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run security audit
      run: |
        echo "🔒 Running security audit..."
        
        # Install gosec
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        
        # Run security scan
        $(go env GOPATH)/bin/gosec ./...
        
    - name: Check for known vulnerabilities
      run: |
        echo "🛡️ Checking for known vulnerabilities..."
        go list -json -deps ./... | jq -r '.Module | select(.Path) | .Path' | sort -u | xargs go list -versions 2>/dev/null || true

  # Step 8: Final Integration Verification
  final-verification:
    name: Final Integration Verification
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests, documentation-check, security-audit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Final end-to-end test
      run: |
        echo "🎬 Running final end-to-end verification..."
        
        # Build final binary
        go build -o uroboro ./cmd/uroboro
        
        # Test complete workflow
        ./uroboro capture "Final CI verification - all systems go!"
        ./uroboro status --days 1
        
        # Test ripcord functionality
        ./uroboro status --ripcord --days 1 > /dev/null
        
        echo "🎉 Final verification complete - Trinity integration verified!"
        
    - name: Capture CI success
      run: |
        echo "📋 Documenting CI success..."
        ./uroboro capture "🎉 CI PIPELINE SUCCESS: All tests passed - build verification, unit tests, integration tests, performance tests, security audit, and documentation checks all green. Trinity integration fully validated and ready for production."
        
    - name: CI Summary
      run: |
        echo "📊 CI Pipeline Summary"
        echo "======================"
        echo "✅ Code quality checks passed"
        echo "✅ Unit tests passed"
        echo "✅ Build verification passed"
        echo "✅ Integration tests passed"
        echo "✅ Performance tests passed"
        echo "✅ Documentation verified"
        echo "✅ Security audit passed"
        echo "✅ Final verification passed"
        echo ""
        echo "🚀 uroboro is ready for production deployment!"